Hey, Pandey here. In this video we will learn Selection sort. Selection 
sort is the most
basic of the sorting algorithms. So, let's get started.

RealWorld
---------
When thinking about computer algorithms, many times it is useful
to leave the world of data structures and computers and think what you would do
if an analogous problem in real world were presented to you.

So, let's say, there were n students standing in a line and you wanted
to arrange them in the order of their heights, with the shortest student
at the front and the tallest one at the back.

A very intuitive thing to do would be to first pick up the shortest student
and bring it to the front. You have already made some progress. Now, you
pick up the next shortest student an bring him or her just behind the
shortest student. You keep on repeating this process till the last student
and you have arranged the students in the order of their heights.

Hello, you have just discovered selection sort!
At each step you have a part of the queue which is already sorted and you 
are "select" the shortest student in the remaining queue. That's why it
is called "selection" sort.

Now coming back to the world of data structures and algorithms, we do
a very similar process with the arrays. At each step, one part of the array
is sorted. You select the smallest element in the remaining part and then
put it at the beginning of the remaining part.

There is one detail tough. This is where computer world diverges a little
from the real world. At each step, all that we want is to bring the next
smallest element at its correct place. We can do better than shifting all
of the intermediate elements by one place. We can just swap the smallest
element with the element where we want to put the smallest element. That
way a lot of movement of elements is avoided.

We keep on repeating bringing the smallest element from the remaining
list to the approprite place and when we reach the end of the array, we are done!

Alright,
Now that we know the algorithm for selection sort, let's write the code for it.
Let's work with a concrete example. We have an array of size 7.

We will go over each slot of the array, putting the correct element in the
slot, so there is a loop from 0 to n - 1. 

So, there will be a loop from i = 0 to i = n -1

To begin with, we fix i = 0.
We have another variable j which we iterate from i to n-1. In another variable
called jmin we store the index of smallest value we have encountered thus
far. As we scan the array, if we encounter a smaller element, we update
jmin.

When we j reaches 6, we have scanned all the unsorted elements. We know that
the element at jmin is the smallest element. In this case, element at 4th
location, i.e. 14, is the smallest element. We swap at with the element at ith
i.e. 0th location. These three lines of code swap the elements at location i
and jmin. As an aside, do you think we can do a swap without the temporary
variable? Mention in the comment what you think!

ok. Now that we have go the first element correct, we increment i to 1 and
iterate j from 2 to 6. This time, we find jmin to be 5, since 17 is the
smallest element in the remaining array. We swap 17 with the elemnet at index 1.

We keep on incrementing i and finding the smallest elemnet from ith element
onwards and swap it with the element at the ith location.

When i reaches 6, the array is sorted.

Great. So, this was selection sort

Let's have a look at the time complexity of selection sort.
Time complexity of selection sort is fairly easy to determine.

Looking at the code, it is clear that the if statement lies inside the 
double loop, so that will execute most number of times, and thus, that
will determinat the complexity of the algorith.

Now, for i = 0, j varies from 0 to n-1, so it takes a total of n values. So,
for i = 0, the if statment executes, n times. For i = 1, j varies from 1 to n-1,
giving rise to n -1 executions. We go on like this, till we reach i = n - 1 when there is just one execution of if statement.

We sum up all these numbers that we found out. It is n(n-1)/2, which is an O(n square) experession. Thus, the complexity of selection sort is order n squared.

So, this was selection sort. See you later with more algorithms. Till then, by bye.
